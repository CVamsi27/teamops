generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { 
  ADMIN 
  MEMBER 
  VIEWER 
}

enum TaskStatus { 
  TODO 
  IN_PROGRESS 
  DONE 
}

enum Priority { 
  P1 
  P2 
  P3 
  P4 
  P5 
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  name         String?
  passwordHash String?
  provider     String?     // 'google' or 'local'
  providerId   String?
  role         Role        @default(MEMBER)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  memberships  Membership[]
  tasks        Task[]      @relation("TaskAssignee")
}

model Team {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
  projects    Project[]
  invitations Invitation[]
}

model Membership {
  id        String   @id @default(uuid())
  role      Role     @default(MEMBER)
  user      User     @relation(fields:[userId], references:[id], onDelete: Cascade)
  userId    String
  team      Team     @relation(fields:[teamId], references:[id], onDelete: Cascade)
  teamId    String
  createdAt DateTime @default(now())

  @@unique([userId, teamId])
}

model Invitation {
  id        String   @id @default(uuid())
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  accepted  Boolean  @default(false)
  team      Team     @relation(fields:[teamId], references:[id], onDelete: Cascade)
  teamId    String
  createdAt DateTime @default(now())

  @@index([email])
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  team        Team      @relation(fields:[teamId], references:[id], onDelete: Cascade)
  teamId      String
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(P3)
  dueDate     DateTime?
  project     Project    @relation(fields:[projectId], references:[id], onDelete: Cascade)
  projectId   String
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}