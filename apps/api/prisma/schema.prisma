generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id         String       @id @default(uuid())
  type       ActivityType
  userId     String
  userName   String
  userEmail  String
  entityId   String
  entityName String
  entityType String
  metadata   Json?
  createdAt  DateTime     @default(now())
  projectId  String?
  taskId     String?
  teamId     String?
  
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task       Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  team       Team?        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([teamId])
}

model Invitation {
  id        String   @id @default(uuid())
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  createdAt DateTime @default(now())
  accepted  Boolean  @default(false)
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([email])
}

model Membership {
  id        String   @id @default(uuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
}

model Project {
  id           String   @id @default(uuid())
  name         String
  description  String?
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  teamId       String
  createdById  String
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdBy    User     @relation(fields: [createdById], references: [id])
  tasks        Task[]
  activities   Activity[]
  memberships  ProjectMembership[]
  templates    TaskTemplate[]

  @@index([teamId])
  @@index([createdById])
}

model Task {
  id           String      @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus  @default(TODO)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  projectId    String?
  assigneeId   String?
  createdById  String
  googleCalendarId String?
  project      Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee     User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy    User        @relation("TaskCreator", fields: [createdById], references: [id])
  activities   Activity[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([createdById])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invitations Invitation[]
  memberships Membership[]
  projects    Project[]
  activities  Activity[]

  @@index([name])
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  name                 String?
  provider             String?
  providerId           String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  passwordHash         String?
  role                 Role           @default(MEMBER)
  googleCalendarToken  String?
  googleRefreshToken   String?
  googleTokenExpiry    DateTime?
  memberships          Membership[]
  projectMemberships   ProjectMembership[]
  notifications        Notification[]
  assignedTasks        Task[]         @relation("TaskAssignee")
  createdTasks         Task[]         @relation("TaskCreator")
  createdProjects      Project[]
  activities           Activity[]
  chatMessages         ChatMessage[]
  createdTemplates     TaskTemplate[] @relation("TemplateCreator")
  templateAssignments  TemplateAssignee[] @relation("TemplateAssignee")

  @@index([email])
}

model ChatMessage {
  id         String      @id @default(uuid())
  content    String
  roomId     String
  roomType   ChatRoomType
  messageType ChatMessageType @default(MESSAGE)
  userId     String
  userName   String
  userEmail  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, roomType])
  @@index([createdAt])
  @@index([userId])
}

model ProjectMembership {
  id        String    @id @default(uuid())
  role      ProjectRole @default(CONTRIBUTOR)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model TaskTemplate {
  id            String   @id @default(uuid())
  name          String
  description   String?
  priority      TaskPriority @default(MEDIUM)
  projectId     String
  createdById   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy     User     @relation("TemplateCreator", fields: [createdById], references: [id])
  assignees     TemplateAssignee[]
  
  @@index([projectId])
  @@index([createdById])
}

model TemplateAssignee {
  id         String   @id @default(uuid())
  templateId String
  userId     String
  createdAt  DateTime @default(now())
  
  template   TaskTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User         @relation("TemplateAssignee", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, userId])
  @@index([templateId])
  @@index([userId])
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_DELETED
  TASK_ASSIGNED
  TASK_UNASSIGNED
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  TEAM_CREATED
  TEAM_UPDATED
  MEMBER_ADDED
  MEMBER_REMOVED
  COMMENT_ADDED
  DUE_DATE_CHANGED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

enum ProjectRole {
  LEAD
  CONTRIBUTOR
  REVIEWER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum ChatRoomType {
  TEAM
  TASK
  PROJECT
}

enum ChatMessageType {
  MESSAGE
  SYSTEM
}
