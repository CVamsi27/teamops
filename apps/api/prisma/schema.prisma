generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  P1
  P2
  P3
  P4
  P5
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String?
  avatarUrl   String?
  passwordHash String?     // for email/password; OAuth users may not have this
  provider    String?      // oauth provider
  providerId  String?      // oauth provider id
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  memberships Membership[]
  tasks       Task[]       @relation("TaskAssignee")
}

model Team {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  memberships Membership[]
  projects    Project[]
  invitations Invitation[]
}

model Membership {
  id        String   @id @default(uuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())

  userId String
  teamId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Invitation {
  id        String   @id @default(uuid())
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  createdAt DateTime @default(now())
  accepted  Boolean  @default(false)

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([email])
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  teamId String
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks  Task[]
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(P3)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
}