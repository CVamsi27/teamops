name: Deploy to Vercel + Railway

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10"

jobs:
  # Build and Test
  test-and-build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Build applications
        run: pnpm build

      - name: Run security audit
        run: pnpm audit --audit-level moderate || echo "Security audit completed with warnings"

  # Deploy Backend to Railway
  deploy-railway:
    name: Deploy API to Railway
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Railway Configuration
        id: check-railway
        run: |
          if [ -n "${{ secrets.RAILWAY_TOKEN }}" ]; then
            echo "railway-configured=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Railway token configured"
          else
            echo "railway-configured=false" >> $GITHUB_OUTPUT
            echo "‚ùå Railway token not configured"
          fi

      - name: Setup Railway CLI
        if: steps.check-railway.outputs.railway-configured == 'true'
        run: |
          echo "üîß Installing Railway CLI..."
          npm install -g @railway/cli

      - name: Deploy to Railway
        if: steps.check-railway.outputs.railway-configured == 'true'
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "üöÄ Deploying API to Railway..."

          # Login to Railway
          railway login --token $RAILWAY_TOKEN

          # Navigate to API directory
          cd apps/api

          # Set production environment variables
          railway variables set NODE_ENV=production || echo "NODE_ENV already set"
          railway variables set PORT=3001 || echo "PORT already set"

          # Deploy the service
          railway up --detach

          echo "‚úÖ API successfully deployed to Railway!"

          # Get deployment URL
          RAILWAY_URL=$(railway status --json | grep -o '"url":"[^"]*"' | cut -d'"' -f4) || echo "Could not fetch Railway URL"
          if [ -n "$RAILWAY_URL" ]; then
            echo "üåê Railway URL: $RAILWAY_URL"
          fi

      - name: Manual Railway setup notice
        if: steps.check-railway.outputs.railway-configured == 'false'
        run: |
          echo "üìã To enable Railway deployment, add to repository secrets:"
          echo "   - RAILWAY_TOKEN: Your Railway API token"
          echo "   - RAILWAY_SERVICE_NAME: Your Railway service name (optional)"
          echo ""
          echo "üöÄ Manual deployment command:"
          echo "   railway login && cd apps/api && railway up"

  # Deploy Frontend to Vercel
  deploy-vercel:
    name: Deploy Web to Vercel
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build web application
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL || 'https://teamops-api.up.railway.app/api' }}
        run: pnpm build --filter=web

      - name: Check Vercel Configuration
        id: check-vercel
        run: |
          if [ -n "${{ secrets.VERCEL_TOKEN }}" ] && [ -n "${{ secrets.VERCEL_ORG_ID }}" ] && [ -n "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "vercel-configured=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Vercel configuration complete"
          else
            echo "vercel-configured=false" >> $GITHUB_OUTPUT
            echo "‚ùå Vercel configuration incomplete"
          fi

      - name: Deploy to Vercel
        if: steps.check-vercel.outputs.vercel-configured == 'true'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: "--prod"
          scope: ${{ secrets.VERCEL_TEAM_ID }}

      - name: Manual Vercel setup notice
        if: steps.check-vercel.outputs.vercel-configured == 'false'
        run: |
          echo "üìã To enable Vercel deployment, add to repository secrets:"
          echo "   - VERCEL_TOKEN: Your Vercel API token"
          echo "   - VERCEL_ORG_ID: Your Vercel organization ID"
          echo "   - VERCEL_PROJECT_ID: Your Vercel project ID"
          echo "   - VERCEL_TEAM_ID: Your Vercel team ID (optional)"
          echo ""
          echo "üöÄ Manual deployment command:"
          echo "   cd apps/web && vercel --prod"

  # Health checks
  health-check:
    name: Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-vercel]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Wait for deployments
        run: |
          echo "‚è≥ Waiting for deployments to stabilize..."
          sleep 45

      - name: Health check Railway API
        run: |
          API_URL="${{ vars.RAILWAY_API_URL || 'https://teamops-api.up.railway.app' }}"

          echo "üîç Checking Railway API: $API_URL/api/health"

          for i in {1..3}; do
            if curl -f -m 20 "$API_URL/api/health"; then
              echo "‚úÖ Railway API health check passed!"
              break
            else
              echo "‚è≥ API attempt $i failed, retrying in 15s..."
              sleep 15
            fi
            
            if [ $i -eq 3 ]; then
              echo "‚ö†Ô∏è  Railway API health check failed (may still be starting)"
            fi
          done

      - name: Health check Vercel Web
        run: |
          WEB_URL="${{ vars.VERCEL_WEB_URL || 'https://teamops.vercel.app' }}"

          echo "üîç Checking Vercel Web: $WEB_URL"

          for i in {1..3}; do
            if curl -f -m 20 "$WEB_URL"; then
              echo "‚úÖ Vercel web health check passed!"
              break
            else
              echo "‚è≥ Web attempt $i failed, retrying in 10s..."
              sleep 10
            fi
            
            if [ $i -eq 3 ]; then
              echo "‚ö†Ô∏è  Vercel web health check failed"
            fi
          done

  # Integration test (optional)
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: health-check
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Test API endpoints
        run: |
          API_URL="${{ vars.RAILWAY_API_URL || 'https://teamops-api.up.railway.app' }}"

          echo "üß™ Running integration tests..."

          # Test authentication endpoint
          curl -f "$API_URL/api/auth/profile" -H "Accept: application/json" || echo "Auth endpoint requires login (expected)"

          # Test public endpoints
          curl -f "$API_URL/api/health" || echo "Health endpoint test failed"

          echo "‚úÖ Integration tests completed"

  # Final notification
  notify-success:
    name: Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-vercel, health-check]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment Summary
        run: |
          echo "üéâ **TeamOps Deployment Summary**"
          echo ""

          if [ "${{ needs.deploy-railway.result }}" == "success" ]; then
            echo "‚úÖ Railway (API): Success"
            echo "   üîó ${{ vars.RAILWAY_API_URL || 'https://teamops-api.up.railway.app' }}"
          else
            echo "‚ùå Railway (API): Failed or skipped"
          fi

          if [ "${{ needs.deploy-vercel.result }}" == "success" ]; then
            echo "‚úÖ Vercel (Web): Success"
            echo "   üîó ${{ vars.VERCEL_WEB_URL || 'https://teamops.vercel.app' }}"
          else
            echo "‚ùå Vercel (Web): Failed or skipped"
          fi

          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "‚úÖ Health Checks: Passed"
          else
            echo "‚ö†Ô∏è  Health Checks: Some issues detected"
          fi

          echo ""
          echo "üìä View deployment details in the Actions tab"
          echo "üõ†Ô∏è  For manual deployment: npm run deploy:free"
