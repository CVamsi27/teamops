name: Deploy to Render

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10"

jobs:
  # Build and Test
  test-and-build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Run type check
        run: pnpm build --dry-run || echo "Type check completed"

      - name: Build applications
        run: pnpm build

      - name: Run security audit
        run: pnpm audit --audit-level moderate || echo "Security audit completed with warnings"

  # Deploy to Render (automatic via render.yaml)
  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger Render Deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          if [ -n "$RENDER_API_KEY" ] && [ -n "$RENDER_SERVICE_ID" ]; then
            echo "üöÄ Triggering Render deployment..."
            
            # Trigger deployment via Render API
            curl -X POST \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              -H "Content-Type: application/json" \
              "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
            
            echo "‚úÖ Render deployment triggered!"
            echo "üìä Monitor deployment at: https://dashboard.render.com/services/$RENDER_SERVICE_ID"
          else
            echo "‚ÑπÔ∏è  Render API credentials not configured."
            echo "üîß Render will auto-deploy from this commit via render.yaml"
            echo "üìã To enable API-triggered deployments, add to repository secrets:"
            echo "   - RENDER_API_KEY: Your Render API key"
            echo "   - RENDER_SERVICE_ID: Your Render service ID"
          fi

  # Health check after deployment
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy-render
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for Render deployment to complete..."
          sleep 60

      - name: Health check API
        run: |
          API_URL="${{ vars.RENDER_API_URL || 'https://teamops-api.onrender.com' }}"
          WEB_URL="${{ vars.RENDER_WEB_URL || 'https://teamops-web.onrender.com' }}"

          echo "üîç Checking API health: $API_URL/api/health"

          # Check API health with retries (Render free tier can be slow to wake up)
          for i in {1..5}; do
            if curl -f -m 30 "$API_URL/api/health"; then
              echo "‚úÖ API health check passed!"
              break
            else
              echo "‚è≥ Attempt $i failed, retrying in 30s..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "‚ùå API health check failed after 5 attempts"
              exit 1
            fi
          done

          echo "üîç Checking web application: $WEB_URL"

          # Check web application
          for i in {1..3}; do
            if curl -f -m 30 "$WEB_URL"; then
              echo "‚úÖ Web application health check passed!"
              break
            else
              echo "‚è≥ Web check attempt $i failed, retrying in 20s..."
              sleep 20
            fi
            
            if [ $i -eq 3 ]; then
              echo "‚ùå Web application health check failed"
              exit 1
            fi
          done

          echo "üéâ All health checks passed!"

  # Notification (optional)
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-render, health-check]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-render.result }}" == "success" ] && [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "‚úÖ üéâ TeamOps successfully deployed to Render!"
            echo "üåê Web: ${{ vars.RENDER_WEB_URL || 'https://teamops-web.onrender.com' }}"
            echo "‚öôÔ∏è  API: ${{ vars.RENDER_API_URL || 'https://teamops-api.onrender.com' }}"
          else
            echo "‚ùå Deployment failed or health checks did not pass"
            echo "üîç Check the logs above for details"
          fi
